import {
    ApplicationCommandType,
    ChannelType,
    ChatInputCommandInteraction,
    ComponentType,
    ContextMenuCommandBuilder,
    ContextMenuCommandInteraction,
    Message,
    SlashCommandBuilder,
} from "discord.js";
import type { Command } from "../types";
import {
    dataFromMessageContent,
    getCollectionsFromNotion,
    modalContent,
    NotionPushData,
    pushImageToNotion,
    replies,
} from "./utils";

const commands: Command[] = [
    {
        command: new SlashCommandBuilder()
            .setName("publish")
            .setDescription("Publish Midjourney's image to hugo.news"),
        handler: async (interaction) => {
            const channel = await interaction.client.channels.fetch(
                interaction.channelId
            );
            // noinspection JSUnresolvedReference
            if (!channel || channel.type !== ChannelType.GuildText) return;
            (await channel.messages.fetch({ limit: 1 })).map(
                async (message) => {
                    await publish(interaction, message);
                }
            );
        },
    } satisfies Command<SlashCommandBuilder>,
    {
        command: new ContextMenuCommandBuilder()
            .setName("Publish")
            .setType(ApplicationCommandType.Message),
        handler: async (interaction) => {
            await publish(interaction, interaction.targetMessage);
        },
    } satisfies Command<ContextMenuCommandBuilder>,
];

async function publish(
    interaction: ChatInputCommandInteraction | ContextMenuCommandInteraction,
    message: Message
) {
    // noinspection JSUnresolvedReference
    if (message.author.id !== process.env.MIDJOURNEY_ID) {
        await interaction.reply({
            content:
                "The selected message has not been sent by Midjourney's bot",
            ephemeral: true,
        });
        return;
    }

    const data = dataFromMessageContent(message.content);
    if (!data) {
        await interaction.reply({
            content:
                "The previous message has not been generated by MidJourney, so I can not publish anything",
            ephemeral: true,
        });
        return;
    }
    if (data.type !== "UPSCALE") {
        await interaction.reply({
            content: "Not an upscale, I can't publish that",
            ephemeral: true,
        });
        return;
    }

    await interaction.showModal(modalContent(data.prompt));

    const modalSubmitInteraction = await interaction.awaitModalSubmit({
        time: 0,
    });
    const title = modalSubmitInteraction.fields.getTextInputValue("titleInput");
    const prompt =
        modalSubmitInteraction.fields.getTextInputValue("promptInput");
    const promptShareInteraction = await modalSubmitInteraction.reply(
        replies.modal(title)
    );

    const promptShare = await promptShareInteraction.awaitMessageComponent({
        componentType: ComponentType.Button,
    });

    const selectCollectionInteraction = await modalSubmitInteraction.editReply(
        replies.collections(title, await getCollectionsFromNotion())
    );

    const collections = await selectCollectionInteraction.awaitMessageComponent(
        {
            componentType: ComponentType.StringSelect,
        }
    );

    const pushData: NotionPushData = {
        title,
        prompt,
        promptShare: promptShare.customId === "promptShare_true",
        image: message.attachments.first()?.url ?? "",
        collections: collections.values ?? [],
    };

    try {
        const pageId = await pushImageToNotion(pushData);
        await modalSubmitInteraction.editReply(replies.final(pageId, pushData));
    } catch (e) {
        console.error(e);
    }
}

export default commands;
